abstract class Drone {
    private String id;
    private String status;
    private double cargoCapacity;
    private double currentCargoWeight;

    public Drone(String id, double cargoCapacity) {
        this.id = id;
        this.cargoCapacity = cargoCapacity;
        this.status = "IDLE";
        this.currentCargoWeight = 0;
    }

    public boolean loadCargo(double weight) {
        if (currentCargoWeight + weight <= cargoCapacity) {
            currentCargoWeight += weight;
            return true;
        }
        return false;
    }

    public void startDelivery() {
        if (currentCargoWeight > 0) {
            status = "IN_FLIGHT";
        }
    }

    public void completeDelivery() {
        status = "IDLE";
        currentCargoWeight = 0;
    }

    public abstract double calculateFlightTime(double distance);

    public String getStatus() {
        return status;
    }

    public String getId() {
        return id;
    }
}



class LightDrone extends Drone {
    public LightDrone(String id) {
        super(id, 50);
    }

    public double calculateFlightTime(double distance) {
        return distance / 10.0;
    }
}

class HeavyDrone extends Drone {
    public HeavyDrone(String id) {
        super(id, 200);
    }

    public double calculateFlightTime(double distance) {
        return distance / 5.0;
    }
}



abstract class CelestialBody {
    private String name;
    private double x, y;

    public CelestialBody(String name, double x, double y) {
        this.name = name;
        this.x = x;
        this.y = y;
    }

    public double distanceTo(CelestialBody target) {
        return Math.sqrt(Math.pow(this.x - target.x, 2) + Math.pow(this.y - target.y, 2));
    }

    public String getName() {
        return name;
    }
}

class Planet extends CelestialBody {
    private String atmosphereType;

    public Planet(String name, double x, double y, String atmosphereType) {
        super(name, x, y);
        this.atmosphereType = atmosphereType;
    }
}

class SpaceStation extends CelestialBody {
    private int stationLevel;

    public SpaceStation(String name, double x, double y, int stationLevel) {
        super(name, x, y);
        this.stationLevel = stationLevel;
    }
}




class Cargo {
private double weight;
private String description;

public Cargo(double weight, String description) {
    this.weight = weight;
    this.description = description;
}

public double getWeight() {
    return weight;
}
}





class DeliveryTask {
    private CelestialBody origin;
    private CelestialBody destination;
    private Cargo cargo;
    private Drone assignedDrone;

    public DeliveryTask(CelestialBody origin, CelestialBody destination, Cargo cargo) {
        this.origin = origin;
        this.destination = destination;
        this.cargo = cargo;
    }

    public boolean assignDrone(Drone drone) {
        if (drone.loadCargo(cargo.getWeight())) {
            this.assignedDrone = drone;
            return true;
        }
        return false;
    }

    public void executeDelivery() {
        if (assignedDrone != null) {
            assignedDrone.startDelivery();
            double distance = origin.distanceTo(destination);
            double time = assignedDrone.calculateFlightTime(distance);
            System.out.println("Delivery in progress. Estimated time: " + time);
            assignedDrone.completeDelivery();
        }
    }
}



import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class GalacticDeliverySystem {
    private static List<Drone> drones = new ArrayList<>();
    private static List<CelestialBody> celestialBodies = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("1. Add Drone");
            System.out.println("2. Add Celestial Body");
            System.out.println("3. Assign Delivery Task");
            System.out.println("4. View Drone Status");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addDrone();
                    break;
                case 2:
                    addCelestialBody();
                    break;
                case 3:
                    assignDeliveryTask();
                    break;
                case 4:
                    viewDroneStatus();
                    break;
                case 5:
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void addDrone() {
        System.out.print("Enter Drone ID: ");
        String id = scanner.nextLine();
        System.out.print("Enter type (Light/Heavy): ");
        String type = scanner.nextLine();
        drones.add(type.equalsIgnoreCase("Light") ? new LightDrone(id) : new HeavyDrone(id));
        System.out.println("Drone added.");
    }

    private static void addCelestialBody() {
        System.out.print("Enter Celestial Body Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter X Coordinate: ");
        double x = scanner.nextDouble();
        System.out.print("Enter Y Coordinate: ");
        double y = scanner.nextDouble();
        celestialBodies.add(new Planet(name, x, y, "Unknown"));
        System.out.println("Celestial body added.");
    }

    private static void assignDeliveryTask() {
        if (drones.isEmpty() || celestialBodies.size() < 2) {
            System.out.println("Not enough resources for a delivery task.");
            return;
        }
        System.out.println("Delivery task assigned and executed.");
    }

    private static void viewDroneStatus() {
        for (Drone d : drones) {
            System.out.println("Drone ID: " + d.getId() + " | Status: " + d.getStatus());
        }
    }
}

